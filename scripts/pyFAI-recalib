#!/usr/bin/env python
# -*- coding: utf8 -*-
#
#    Project: Azimuthal integration
#             https://forge.epn-campus.eu/projects/azimuthal
#
#    File: "$Id$"
#
#    Copyright (C) European Synchrotron Radiation Facility, Grenoble, France
#
#    Principal author:       Jérôme Kieffer (Jerome.Kieffer@ESRF.eu)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

"""
pyFAI-rcalib

A tool for refining the geometry of a detector using a reference sample and a previously known calibration file.

usage:
  python2.6 pyFAI-recalib --poni=input.poni -dspacing=ref.d inputFile.edf


"""

__author__ = "Jerome Kieffer"
__contact__ = "Jerome.Kieffer@ESRF.eu"
__license__ = "GPLv3+"
__copyright__ = "European Synchrotron Radiation Facility, Grenoble, France"
__date__ = "19/10/2012"
__satus__ = "development"

import os, sys, gc, threading, time, logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("pyFAI.recalib")
import numpy
from numpy import sin, cos, arccos, sqrt, floor, ceil, radians, degrees, pi
import fabio
import matplotlib
import pylab
from scipy.optimize import fmin, leastsq, fmin_slsqp, anneal
from scipy.interpolate import interp2d
import pyFAI
from pyFAI.geometryRefinement import GeometryRefinement
from pyFAI.peakPicker import PeakPicker, Massif
from pyFAI.utils import averageImages
from  matplotlib.path import Path
import matplotlib.path as mpath
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
matplotlib.interactive(True)
hc = 12.398

try:
    from rfoo.utils import rconsole
    rconsole.spawn_server()
except ImportError:
    logging.info("No socket opened for debugging -> install rfoo")

class Recalibration(object):
    """
    class doing the re-calibration of frames
    """
    def __init__(self, dataFiles=None, darkFiles=None, flatFiles=None, pixelSize=None, splineFile=None, gaussianWidth=None):
        """
        """
        self.dataFiles = dataFiles or []
        self.darkFiles = darkFiles or []
        self.flatFiles = flatFiles or []
        self.pointfile = None
        self.pixelSize = pixelSize
        self.gaussianWidth = gaussianWidth
        self.labelPattern = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]
        self.splineFile = splineFile
        self.cutBackground = None
        self.outfile = "merged.edf"
        self.peakPicker = None
        self.img = None
        self.ai = None
        self.data = None
        self.basename = None
        self.geoRef = None
        self.reconstruct = False
        self.spacing_file = None

    def __repr__(self):
        lst = ["Calibration object:",
             "data= " + ", ".join(self.dataFiles),
             "dark= " + ", ".join(self.darkFiles),
             "flat= " + ", ".join(self.flatFiles)]
        if self.pixelSize:
            lst.append("pixels= " + ", ".join(self.pixelSize))
        lst += ["spline= %s" % self.splineFile,
             "gaussian= %s" % self.gaussianWidth]
        return os.linesep.join(lst)

    def parse(self):
        """
        parse options from command line
        """
        from optparse import OptionParser
        parser = OptionParser()
        parser.add_option("-o", "--out", dest="outfile",
                          help="Filename where processed image is saved", metavar="FILE", default="merged.edf")
        parser.add_option("-v", "--verbose",
                          action="store_true", dest="verbose", default=False,
                          help="switch to debug mode")
#        parser.add_option("-g", "--gaussian", dest="gaussian",
#                      help="Size of the gaussian kernel", default=None)
#        parser.add_option("-c", "--square", dest="square", action="store_true",
#                      help="Use square kernel shape for neighbour search instead of diamond shape", default=False)
#        parser.add_option("-b", "--background", dest="background",
#                      help="Automatic background subtraction", default=None)
#        parser.add_option("-a", "--dark", dest="dark",
#                      help="list of dark images to average and subtract", default=None)
#        parser.add_option("-f", "--flat", dest="flat",
#                      help="list of flat images to average and divide", default=None)
#        parser.add_option("-r", "--reconstruct", dest="reconstruct",
#                      help="Reconstruct image where data<0 (for pilatus)", action="store_true", default=False)
#        parser.add_option("-s", "--spline", dest="spline",
#                      help="spline file describing the detector distortion", default=None)
#        parser.add_option("-p", "--pixel", dest="pixel",
#                      help="size of the pixel in micron", default=None)
        parser.add_option("-s", "--spacing", dest="spacing", metavar="FILE",
                      help="file containing d-spacing of the reference sample", default=None)
        parser.add_option("-d", "--dark", dest="dark", metavar="FILE",
                      help="list of dark images to average and subtract", default=None)
        parser.add_option("-f", "--flat", dest="flat", metavar="FILE",
                      help="list of flat images to average and divide", default=None)
        parser.add_option("-m", "--mask", dest="mask", metavar="FILE",
                      help="file containing the mask", default=None)
        parser.add_option("-p", "--poni", dest="poni", metavar="FILE",
                      help="file containing the diffraction parameter (poni-file)", default=None)
        parser.add_option("-n", "--npt", dest="npt", metavar="FILE",
                      help="file with datapoints saved", default=None)
        parser.add_option("-e", "--energy", dest="energy",
                      help="energy of the X-Ray beam in keV (hc=%skeV.A)" % hc, default=None)
        parser.add_option("-w", "--wavelength", dest="wavelength",
                      help="wavelength of the X-Ray beam in Angstrom", default=None)
        parser.add_option("-l", "--distance", dest="distance",
                      help="sample-detector distance in millimeter", default=None)

        (options, args) = parser.parse_args()

        #Analyse aruments and options
        if options.verbose:
            logger.setLevel(logging.DEBUG)
        self.outfile = options.outfile
        if options.dark:
            print options.dark, type(options.dark)
            self.darkFiles = [f for f in options.dark.split(",") if os.path.isfile(f)]
        if options.flat:
            print options.flat, type(options.flat)
            self.flatFiles = [f for f in options.flat.split(",") if os.path.isfile(f)]
        self.dataFiles = [f for f in args if os.path.isfile(f)]

        self.pointfile = options.npt
        self.spacing_file = options.spacing
        self.ai = pyFAI.load(options.poni)
        if options.wavelength:
            self.ai.wavelength = 1e-10 * float(options.wavelength)
        if options.distance:
            self.ai.distance = 1e-3 * float(options.distance)



    def preprocess(self):
        """
        do dark, flat correction thresholding, ...
        """
        if len(self.dataFiles) > 1 or self.cutBackground or self.darkFiles or self.flatFiles:
            self.outfile = averageImages(self.dataFiles, self.outfile, minimum=self.cutBackground,
                                      darks=self.darkFiles, flats=self.flatFiles)

        else:
            self.outfile = self.dataFiles[0]
        self.peakPicker = PeakPicker(self.outfile)
        self.basename = os.path.splitext(self.outfile)[0]
        self.peakPicker.gui()
        self.peakPicker.fig.canvas.draw()

    def extract_cpt(self):
        d = numpy.loadtxt(self.spacing_file)
        tth = 2.0 * numpy.arcsin(self.ai.wavelength / (2.0e-10 * d))
        tth.sort()
        tth = tth[numpy.where(numpy.isnan(tth) - 1)]
        dtth = numpy.zeros_like(tth)
        dtth[:-1] = tth[1:] - tth[:-1]
        dtth[-1] = dtth[-2]
        ttha = self.ai.twoThetaArray(self.peakPicker.data.shape)
        for i in range(tth.size):
            mask = abs(ttha - tth[i]) <= dtth[i] / 4.0
            self.peakPicker.massif_contour(mask)
            self.peakPicker.fig.canvas.draw()
            all_points = numpy.where(mask)
            size = all_points[0].size
            keep = int(numpy.ceil(numpy.sqrt(size)))
            allpt = numpy.zeros((size, 2), dtype=numpy.int)
            allpt[:, 0] = all_points[0]
            allpt[:, 1] = all_points[1]
            res = []
            cnt = 0
            logger.info("Extracting datapoint for ring %s (2theta = %.2f deg)" % (i, numpy.degrees(tth[i])))
            while True:
                idx = numpy.random.randint(0, size)
                out = self.peakPicker.massif.nearest_peak(allpt[idx])
                if mask[out[0], out[1]]:
                    if out not in res:
                        res.append(out)
                        cnt = 0
                if len(res) >= keep or cnt > 2 * keep:
                    break
                else:
                    cnt += 1
            self.peakPicker.points.append(res, tth[i])
            self.peakPicker.display_points()
        self.peakPicker.control_points.save(self.basename + ".npt")


    def refine(self):
        if os.name == "nt" and self.peakPicker is not None:
            logging.info("We are under windows, matplotlib is not able to display too many images without crashing, this is why the window showing the diffraction image is closed")
            self.peakPicker.closeGUI()
        print self.splineFile
        if self.splineFile:
            self.geoRef = GeometryRefinement(self.data, dist=0.1, splineFile=self.splineFile)
        else:
            self.geoRef = GeometryRefinement(self.data, dist=0.1, pixel1=self.pixelSize[0], pixel2=self.pixelSize[1])
        paramfile = self.basename + ".poni"
        if os.path.isfile(paramfile):
            self.geoRef.load(paramfile)
        print self.geoRef
        previous = sys.maxint
        finished = False
        fig2 = None
        while not finished:
            while previous > self.geoRef.chi2():
                previous = self.geoRef.chi2()
                self.geoRef.refine2(1000000)
                print(self.geoRef)
            print(self.geoRef)
            self.geoRef.save(self.basename + ".poni")
            self.geoRef.del_ttha()
            self.geoRef.del_dssa()
            self.geoRef.del_chia()
            t0 = time.time()
            tth = self.geoRef.twoThetaArray(self.peakPicker.shape)
            t1 = time.time()
            dsa = self.geoRef.solidAngleArray(self.peakPicker.shape)
            t2 = time.time()
            self.geoRef.chiArray(self.peakPicker.shape)
            t2a = time.time()
            self.geoRef.cornerArray(self.peakPicker.shape)
            t2b = time.time()
            if os.name == "nt":
                logger.info("We are under windows, matplotlib is not able to display too many images without crashing, this is why little information is displayed")
            else:
                self.peakPicker.contour(tth)
                if fig2 is None:
                    fig2 = pylab.plt.figure()
                    sp = fig2.add_subplot(111)
                else:
                    sp.images.pop()
                sp.imshow(dsa, origin="lower")
                #self.fig.canvas.draw()
                fig2.show()

            change = raw_input("Modify parameters ?\t ").strip()
            if (change == '') or (change.lower()[0] == "n"):
                finished = True
            else:
                self.peakPicker.readFloatFromKeyboard("Enter Distance in meter (or dist_min[%.3f] dist[%.3f] dist_max[%.3f]):\t " % (self.geoRef.dist_min, self.geoRef.dist, self.geoRef.dist_max), {1:[self.geoRef.set_dist], 3:[ self.geoRef.set_dist_min, self.geoRef.set_dist, self.geoRef.set_dist_max]})
                self.peakPicker.readFloatFromKeyboard("Enter Poni1 in meter (or poni1_min[%.3f] poni1[%.3f] poni1_max[%.3f]):\t " % (self.geoRef.poni1_min, self.geoRef.poni1, self.geoRef.poni1_max), {1:[self.geoRef.set_poni1], 3:[ self.geoRef.set_poni1_min, self.geoRef.set_poni1, self.geoRef.set_poni1_max]})
                self.peakPicker.readFloatFromKeyboard("Enter Poni2 in meter (or poni2_min[%.3f] poni2[%.3f] poni2_max[%.3f]):\t " % (self.geoRef.poni2_min, self.geoRef.poni2, self.geoRef.poni2_max), {1:[self.geoRef.set_poni2], 3:[ self.geoRef.set_poni2_min, self.geoRef.set_poni2, self.geoRef.set_poni2_max]})
                self.peakPicker.readFloatFromKeyboard("Enter Rot1 in rad (or rot1_min[%.3f] rot1[%.3f] rot1_max[%.3f]):\t " % (self.geoRef.rot1_min, self.geoRef.rot1, self.geoRef.rot1_max), {1:[self.geoRef.set_rot1], 3:[ self.geoRef.set_rot1_min, self.geoRef.set_rot1, self.geoRef.set_rot1_max]})
                self.peakPicker.readFloatFromKeyboard("Enter Rot2 in rad (or rot2_min[%.3f] rot2[%.3f] rot2_max[%.3f]):\t " % (self.geoRef.rot2_min, self.geoRef.rot2, self.geoRef.rot2_max), {1:[self.geoRef.set_rot2], 3:[ self.geoRef.set_rot2_min, self.geoRef.set_rot2, self.geoRef.set_rot2_max]})
                self.peakPicker.readFloatFromKeyboard("Enter Rot3 in rad (or rot3_min[%.3f] rot3[%.3f] rot3_max[%.3f]):\t " % (self.geoRef.rot3_min, self.geoRef.rot3, self.geoRef.rot3_max), {1:[self.geoRef.set_rot3], 3:[ self.geoRef.set_rot3_min, self.geoRef.set_rot3, self.geoRef.set_rot3_max]})
                previous = sys.maxint


    def postProcess(self):
        if self.geoRef is None:
            self.refine()
        self.geoRef.save(self.basename + ".poni")
        self.geoRef.del_ttha()
        self.geoRef.del_dssa()
        self.geoRef.del_chia()
        t0 = time.time()
        tth = self.geoRef.twoThetaArray(self.peakPicker.shape)
        t1 = time.time()
        dsa = self.geoRef.solidAngleArray(self.peakPicker.shape)
        t2 = time.time()
        self.geoRef.chiArray(self.peakPicker.shape)
        t2a = time.time()
        self.geoRef.cornerArray(self.peakPicker.shape)
        t2b = time.time()

        fig3 = pylab.plt.figure()
        xrpd = fig3.add_subplot(111)
        fig4 = pylab.plt.figure()
        xrpd2 = fig4.add_subplot(111)
        t3 = time.time()
        a, b = self.geoRef.xrpd(self.peakPicker.data, 1024, self.basename + ".xy")
        t4 = time.time()
        img = self.geoRef.xrpd2(self.peakPicker.data, 400, 360, self.basename + ".azim")[0]
        t5 = time.time()
        print ("Timings:\n two theta array generation %.3fs\n diff Solid Angle  %.3fs\n\
     chi array generation %.3fs\n\
     corner coordinate array %.3fs\n\
     1D Azimuthal integration: %.3fs\n\
     2D Azimuthal integration: %.3fs" % (t1 - t0, t2 - t1, t2a - t2, t2b - t2a, t4 - t3, t5 - t4))
        xrpd.plot(a, b)
        fig3.show()
        xrpd2.imshow(numpy.log(img - img.min() + 1e-3), origin="lower")
        fig4.show()

#This is for debugin wtih rconsole
c = None
if __name__ == "__main__":
    c = Recalibration()
    c.parse()
    c.preprocess()
    c.extract_cpt()
    print c.peakPicker.points
#    c.gui_peakPicker()
#    c.refine()
#    c.postProcess()
#    raw_input("Press enter to quit")

#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#    Project: Fast Azimuthal integration
#             https://forge.epn-campus.eu/projects/azimuthal
#
#    File: "$Id$"
#
#    Copyright (C) European Synchrotron Radiation Facility, Grenoble, France
#
#    Authors: Jérôme Kieffer (Jerome.Kieffer@ESRF.eu)
#             Picca Frédéric-Emmanuel <picca@synchrotron-soleil.fr>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
"""
pyFAI-waxs is the Waxs script of pyFAI that allows data reduction for
Wide Angle Scattering, producing output in 2-theta range output in
radial dimension (and in degrees).
"""

__author__ = "Jerome Kieffer, Picca Frédéric-Emmanuel"
__contact__ = "Jerome.Kieffer@ESRF.eu"
__license__ = "GPLv3+"
__copyright__ = "European Synchrotron Radiation Facility, Grenoble, France"
__date__ = "21/12/2011"
__status__ = "production"

import os
import sys
import time
import fabio
import pyFAI

from optparse import OptionParser


def main():
    usage = "usage: %prog [options] file1.edf file2.edf ..."
    version = "%prog " + pyFAI.version
    parser = OptionParser(usage=usage, version=version)
    parser.add_option("-p", dest="ponifile",
                      type='string', default=None,
                      help="PyFAI parameter file (.poni)")
    parser.add_option("-u", "--dummy", dest="dummy",
                      type="float", default=None,
                      help="dummy value for dead pixels")
    parser.add_option("-U", "--delta_dummy", dest="delta_dummy",
                      type="float", default=None,
                      help="delta dummy value")
    parser.add_option("-m", "--mask", dest="mask",
                      type="string", default=None,
                      help="name of the file containing the mask")

    (options, args) = parser.parse_args()
    if len(args) != 1:
        parser.error("incorrect number of arguments")

    processFile = [param for param in args if os.path.isfile(param)]

    if options.ponifile and processFile:
        integrator = pyFAI.AzimuthalIntegrator()
        integrator.setChiDiscAtZero()
        integrator.load(options.ponifile)
        mask = None
        if integrator.maskfile:
            if options.mask:  # override with the command line mask
                integrator.maskfile = options.mask
            fabiomask = fabio.open(integrator.maskfile)
            if isinstance(fabiomask, fabio.fit2dmaskimage.fit2dmaskimage):
                mask = 1 - fabiomask.data
            else:
                mask = fabiomask.data
        print integrator

        for oneFile in processFile:
            sys.stdout.write("Integrating %s --> " % oneFile)
            outFile = os.path.splitext(oneFile)[0] + ".xy"
            azimFile = os.path.splitext(oneFile)[0] + ".azim"
            data = fabio.open(oneFile).data.astype("float32")
            t0 = time.time()
            _tth, I = integrator.xrpd(data=data,
                                      nbPt=min(data.shape),
                                      filename=outFile,
                                      correctSolidAngle=True,
                                      mask=mask,
                                      dummy=options.dummy,
                                      delta_dummy=options.delta_dummy)
            t1 = time.time()
            integrator.xrpd2(data, 1000, 360,
                             azimFile,
                             mask=mask,
                             dummy=options.dummy,
                             delta_dummy=options.delta_dummy)
            print("%s\t 1D took  %.3fs, 2D took %.3fs" %
                  (outFile, t1 - t0, time.time() - t1))
            print("raw int: %s ; integrated: %s " %
                  (data.sum() / data.size, I.sum() / I.size))

if __name__ == "__main__":
    main()
